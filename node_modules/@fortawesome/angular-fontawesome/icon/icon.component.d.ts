import { OnChanges, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { FaSymbol, FlipProp, IconDefinition, IconProp, PullProp, RotateProp, SizeProp, Styles, Transform } from '@fortawesome/fontawesome-svg-core';
import { FaConfig } from '../config';
import { FaIconLibrary } from '../icon-library';
import { FaStackItemSizeDirective } from '../stack/stack-item-size.directive';
import * as ɵngcc0 from '@angular/core';
export declare class FaIconComponent implements OnChanges {
    private sanitizer;
    private config;
    private iconLibrary;
    private stackItem;
    icon: IconProp;
    /**
     * Specify a title for the icon.
     * This text will be displayed in a tooltip on hover and presented to the
     * screen readers.
     */
    title?: string;
    spin?: boolean;
    pulse?: boolean;
    mask?: IconProp;
    styles?: Styles;
    flip?: FlipProp;
    size?: SizeProp;
    pull?: PullProp;
    border?: boolean;
    inverse?: boolean;
    symbol?: FaSymbol;
    /**
     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `fixedWidth` with your custom styles instead.
     */
    listItem?: boolean;
    rotate?: RotateProp;
    fixedWidth?: boolean;
    classes?: string[];
    transform?: string | Transform;
    /**
     * Specify the `role` attribute for the rendered <svg> element.
     *
     * @default 'img'
     */
    a11yRole: string;
    /**
     * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.
     */
    /**
    * @deprecated Since 0.5.0. Will be removed in 0.6.0. Use `icon` property directly.
    */
    iconProp: IconProp;
    renderedIconHTML: SafeHtml;
    constructor(sanitizer: DomSanitizer, config: FaConfig, iconLibrary: FaIconLibrary, stackItem: FaStackItemSizeDirective);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Programmatically trigger rendering of the icon.
     *
     * This method is useful, when creating {@link FaIconComponent} dynamically or
     * changing its inputs programmatically as in these cases icon won't be
     * re-rendered automatically.
     */
    render(): void;
    protected findIconDefinition(i: IconProp | IconDefinition): IconDefinition | null;
    protected buildParams(): {
        title: string;
        transform: Transform;
        classes: string[];
        mask: IconDefinition;
        styles: Styles;
        symbol: string | boolean;
        attributes: {
            role: string;
        };
    };
    private renderIcon;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FaIconComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FaIconComponent, "fa-icon", never, { "classes": "classes"; "icon": "icon"; "title": "title"; "spin": "spin"; "pulse": "pulse"; "mask": "mask"; "styles": "styles"; "flip": "flip"; "size": "size"; "pull": "pull"; "border": "border"; "inverse": "inverse"; "symbol": "symbol"; "listItem": "listItem"; "rotate": "rotate"; "fixedWidth": "fixedWidth"; "transform": "transform"; "a11yRole": "a11yRole"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaWNvbi5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBGYVN5bWJvbCwgRmxpcFByb3AsIEljb25EZWZpbml0aW9uLCBJY29uUHJvcCwgUHVsbFByb3AsIFJvdGF0ZVByb3AsIFNpemVQcm9wLCBTdHlsZXMsIFRyYW5zZm9ybSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5pbXBvcnQgeyBGYUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBGYUljb25MaWJyYXJ5IH0gZnJvbSAnLi4vaWNvbi1saWJyYXJ5JztcbmltcG9ydCB7IEZhU3RhY2tJdGVtU2l6ZURpcmVjdGl2ZSB9IGZyb20gJy4uL3N0YWNrL3N0YWNrLWl0ZW0tc2l6ZS5kaXJlY3RpdmUnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmFJY29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIHNhbml0aXplcjtcbiAgICBwcml2YXRlIGNvbmZpZztcbiAgICBwcml2YXRlIGljb25MaWJyYXJ5O1xuICAgIHByaXZhdGUgc3RhY2tJdGVtO1xuICAgIGljb246IEljb25Qcm9wO1xuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgYSB0aXRsZSBmb3IgdGhlIGljb24uXG4gICAgICogVGhpcyB0ZXh0IHdpbGwgYmUgZGlzcGxheWVkIGluIGEgdG9vbHRpcCBvbiBob3ZlciBhbmQgcHJlc2VudGVkIHRvIHRoZVxuICAgICAqIHNjcmVlbiByZWFkZXJzLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIHNwaW4/OiBib29sZWFuO1xuICAgIHB1bHNlPzogYm9vbGVhbjtcbiAgICBtYXNrPzogSWNvblByb3A7XG4gICAgc3R5bGVzPzogU3R5bGVzO1xuICAgIGZsaXA/OiBGbGlwUHJvcDtcbiAgICBzaXplPzogU2l6ZVByb3A7XG4gICAgcHVsbD86IFB1bGxQcm9wO1xuICAgIGJvcmRlcj86IGJvb2xlYW47XG4gICAgaW52ZXJzZT86IGJvb2xlYW47XG4gICAgc3ltYm9sPzogRmFTeW1ib2w7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgU2luY2UgMC41LjAuIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjYuMC4gVXNlIGBmaXhlZFdpZHRoYCB3aXRoIHlvdXIgY3VzdG9tIHN0eWxlcyBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGxpc3RJdGVtPzogYm9vbGVhbjtcbiAgICByb3RhdGU/OiBSb3RhdGVQcm9wO1xuICAgIGZpeGVkV2lkdGg/OiBib29sZWFuO1xuICAgIGNsYXNzZXM/OiBzdHJpbmdbXTtcbiAgICB0cmFuc2Zvcm0/OiBzdHJpbmcgfCBUcmFuc2Zvcm07XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSB0aGUgYHJvbGVgIGF0dHJpYnV0ZSBmb3IgdGhlIHJlbmRlcmVkIDxzdmc+IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdCAnaW1nJ1xuICAgICAqL1xuICAgIGExMXlSb2xlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgU2luY2UgMC41LjAuIFdpbGwgYmUgcmVtb3ZlZCBpbiAwLjYuMC4gVXNlIGBpY29uYCBwcm9wZXJ0eSBkaXJlY3RseS5cbiAgICAgKi9cbiAgICAvKipcbiAgICAqIEBkZXByZWNhdGVkIFNpbmNlIDAuNS4wLiBXaWxsIGJlIHJlbW92ZWQgaW4gMC42LjAuIFVzZSBgaWNvbmAgcHJvcGVydHkgZGlyZWN0bHkuXG4gICAgKi9cbiAgICBpY29uUHJvcDogSWNvblByb3A7XG4gICAgcmVuZGVyZWRJY29uSFRNTDogU2FmZUh0bWw7XG4gICAgY29uc3RydWN0b3Ioc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGNvbmZpZzogRmFDb25maWcsIGljb25MaWJyYXJ5OiBGYUljb25MaWJyYXJ5LCBzdGFja0l0ZW06IEZhU3RhY2tJdGVtU2l6ZURpcmVjdGl2ZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUHJvZ3JhbW1hdGljYWxseSB0cmlnZ2VyIHJlbmRlcmluZyBvZiB0aGUgaWNvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCwgd2hlbiBjcmVhdGluZyB7QGxpbmsgRmFJY29uQ29tcG9uZW50fSBkeW5hbWljYWxseSBvclxuICAgICAqIGNoYW5naW5nIGl0cyBpbnB1dHMgcHJvZ3JhbW1hdGljYWxseSBhcyBpbiB0aGVzZSBjYXNlcyBpY29uIHdvbid0IGJlXG4gICAgICogcmUtcmVuZGVyZWQgYXV0b21hdGljYWxseS5cbiAgICAgKi9cbiAgICByZW5kZXIoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZmluZEljb25EZWZpbml0aW9uKGk6IEljb25Qcm9wIHwgSWNvbkRlZmluaXRpb24pOiBJY29uRGVmaW5pdGlvbiB8IG51bGw7XG4gICAgcHJvdGVjdGVkIGJ1aWxkUGFyYW1zKCk6IHtcbiAgICAgICAgdGl0bGU6IHN0cmluZztcbiAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG4gICAgICAgIGNsYXNzZXM6IHN0cmluZ1tdO1xuICAgICAgICBtYXNrOiBJY29uRGVmaW5pdGlvbjtcbiAgICAgICAgc3R5bGVzOiBTdHlsZXM7XG4gICAgICAgIHN5bWJvbDogc3RyaW5nIHwgYm9vbGVhbjtcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgcm9sZTogc3RyaW5nO1xuICAgICAgICB9O1xuICAgIH07XG4gICAgcHJpdmF0ZSByZW5kZXJJY29uO1xufVxuIl19